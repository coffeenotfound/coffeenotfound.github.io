<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-06-06T21:16:44+02:00</updated><id>/</id><title type="html">My Awesome Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Setting-up Jekyll</title><link href="/blog/setting-up-jekyll/" rel="alternate" type="text/html" title="Setting-up Jekyll" /><published>2017-05-27T00:00:00+02:00</published><updated>2017-05-27T00:00:00+02:00</updated><id>/blog/setting-up-jekyll</id><content type="html" xml:base="/blog/setting-up-jekyll/">&lt;p&gt;Jekyll, the amazing &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;static website generator&lt;/a&gt;, can be a bit confusing to set-up and get running.
First impressions can deceive though, because it’s actually quite easy!&lt;/p&gt;

&lt;!-- endexcerpt --&gt;

&lt;h2 id=&quot;installing-ruby-and-git-bash&quot;&gt;Installing Ruby (and Git Bash)&lt;/h2&gt;

&lt;p&gt;Jekyll is built in Ruby, so the first thing we need to do is install a Ruby runtime. If you are on Windows,
I recommend the &lt;a href=&quot;https://rubyinstaller.org/&quot;&gt;RubyInstaller&lt;/a&gt; (not because it is inherently better than other distributions
but it makes the whole process pretty painless). Double click it and let it do it’s thing.&lt;/p&gt;

&lt;p&gt;We also need to be able to start Jekyll and tell it what to do. For that task I am using the &lt;a href=&quot;https://git-for-windows.github.io/&quot;&gt;Git Bash&lt;/a&gt;
(the one that comes with &lt;em&gt;Git for Windows&lt;/em&gt;) which is essentially just a Bash shell. Of course you can use whatever shell you
desire, I just like Git Bash as I already use it for Git and it allows me to integrate the whole workflow a little
better, but tastes may very.&lt;/p&gt;

&lt;h2 id=&quot;installing-jekyll&quot;&gt;Installing Jekyll&lt;/h2&gt;

&lt;p&gt;Once we have installed Ruby and have a shell the do our business in, we need to install Jekyll.
Open up your shell of choice and type in &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll bundler&lt;/code&gt;. This will install the bundler,
a kind of Ruby package manager thingy, and the Jekyll gem.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-blog&quot;&gt;Setting-up the Blog&lt;/h2&gt;

&lt;p&gt;Now that we have everything installed and ready to go we can actually set-up our blog.
A Jeklly blog, while generally pretty hassle-free, &lt;em&gt;does&lt;/em&gt; need some special care when setting up.
There’s Bundler with it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile.lock&lt;/code&gt; file, a config file, a theme and not even to mention
some sample content.&lt;/p&gt;

&lt;p&gt;Luckily, Jekyll provides an easy way to get us where we want to be.
Navigate to the folder where you want the Blog to live locally (this would be your site’s repo) and
run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new .&lt;/code&gt;. This will create the blog files in the current directory.&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-blog&quot;&gt;Configuring the Blog&lt;/h2&gt;

&lt;p&gt;Finally we have created our blog! Now we can start customizing it and writing blog posts. At this point
there is actually already some sample content on the blog so you can skip to the section about
&lt;a href=&quot;#previewing-the-blog&quot;&gt;previewing&lt;/a&gt; it if you would like to see what it already looks like.&lt;/p&gt;

&lt;h2 id=&quot;previewing-the-blog&quot;&gt;Previewing the Blog&lt;/h2&gt;

&lt;p&gt;Having access to the raw files is nice and dandy but how do we actually see what our blog looks like?
Running &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; starts a local server at port 4000 that hosts the blog so all we have to do now
is to type in &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt; into our browser and voilà, a blog!&lt;/p&gt;

&lt;p&gt;By default Jekyll has “incremental build mode” activated so when we change a file the updates will be instantaniously
visible on our hosted blog! (Try it out, it’s awesome!)&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As you can see setting up a Jekyll blog is a piece of cake! Not only that but a piece of yummy, moist cake.
Now all you have to do is go out there and write up some blog posts with weird and wonderful facts
that might indeed make the world a better place (with weirdly interesting facts).&lt;/p&gt;</content><author><name></name></author><summary type="html">Jekyll, the amazing static website generator, can be a bit confusing to set-up and get running. First impressions can deceive though, because it’s actually quite easy!</summary></entry><entry><title type="html">Jekyll Tip #1: Pretty URLs</title><link href="/blog/jekyll-tip-1-pretty-urls/" rel="alternate" type="text/html" title="Jekyll Tip #1: Pretty URLs" /><published>2017-05-27T00:00:00+02:00</published><updated>2017-05-27T00:00:00+02:00</updated><id>/blog/jekyll-tip-1-pretty-urls</id><content type="html" xml:base="/blog/jekyll-tip-1-pretty-urls/"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Very Short Post</title><link href="/blog/very-short-post/" rel="alternate" type="text/html" title="Very Short Post" /><published>2017-05-26T00:00:00+02:00</published><updated>2017-05-26T00:00:00+02:00</updated><id>/blog/very-short-post</id><content type="html" xml:base="/blog/very-short-post/">&lt;p&gt;This is a very short post to test the sticky footer.
(Dear God, please just make it work)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Does a thing
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;helloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Do something&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello, world!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// @TODO comment&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html">This is a very short post to test the sticky footer. (Dear God, please just make it work) /** * Does a thing */ function helloWorld(param1, param2) { var something = 0; // Do something if (2.0 % 2 == something) { console.log('Hello, world!'); } else { return null; } // @TODO comment }</summary></entry><entry><title type="html">Markdown Sample</title><link href="/blog/markdown-sample/" rel="alternate" type="text/html" title="Markdown Sample" /><published>2017-05-26T00:00:00+02:00</published><updated>2017-05-26T00:00:00+02:00</updated><id>/blog/markdown-sample</id><content type="html" xml:base="/blog/markdown-sample/">&lt;h1 id=&quot;an-h1-header&quot;&gt;An h1 header&lt;/h1&gt;

&lt;p&gt;Paragraphs are separated by a blank line.&lt;/p&gt;

&lt;p&gt;2nd paragraph. &lt;em&gt;Italic&lt;/em&gt;, &lt;strong&gt;bold&lt;/strong&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;monospace&lt;/code&gt;. Itemized lists
look like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this one&lt;/li&gt;
  &lt;li&gt;that one&lt;/li&gt;
  &lt;li&gt;the other one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that — not considering the asterisk — the actual text
content starts at 4-columns in.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Block quotes are
written like so.&lt;/p&gt;

  &lt;p&gt;They can span multiple paragraphs,
if you like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., “it’s all
in chapters 12–14”). Three dots … will be converted to an ellipsis.
Unicode is supported. ?&lt;/p&gt;

&lt;h2 id=&quot;an-h2-header&quot;&gt;An h2 header&lt;/h2&gt;

&lt;p&gt;Here’s a numbered list:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;first item&lt;/li&gt;
  &lt;li&gt;second item&lt;/li&gt;
  &lt;li&gt;third item&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note again how the actual text starts at 4 columns in (4 characters
from the left side). Here’s a code sample:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Let me re-iterate ...
for i in 1 .. 10 { do-something(i) }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you probably guessed, indented 4 spaces. By the way, instead of
indenting the block, you can use delimited blocks, if you like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;define foobar() {
    print &quot;Welcome to flavor country!&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(which makes copying &amp;amp; pasting easier). You can optionally mark the
delimited block for Pandoc to syntax highlight it:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Quick, count to ten!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# (but not *too* quick)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;an-h3-header&quot;&gt;An h3 header&lt;/h3&gt;

&lt;p&gt;Now a nested list:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, get these ingredients:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;carrots&lt;/li&gt;
      &lt;li&gt;celery&lt;/li&gt;
      &lt;li&gt;lentils&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Boil some water.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dump everything in the pot and follow
this algorithm:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find wooden spoon
uncover pot
stir
cover pot
balance wooden spoon precariously on pot handle
wait 10 minutes
goto first step (or shut off burner when done)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Do not bump wooden spoon or it will fall.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice again how text always lines up on 4-space indents (including
that last line which continues item 3 above).&lt;/p&gt;

&lt;p&gt;Here’s a link to &lt;a href=&quot;http://foo.bar&quot;&gt;a website&lt;/a&gt;, to a &lt;a href=&quot;local-doc.html&quot;&gt;local
doc&lt;/a&gt;, and to a &lt;a href=&quot;#an-h2-header&quot;&gt;section heading in the current
doc&lt;/a&gt;. Here’s a footnote &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Tables can look like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;size&lt;/th&gt;
      &lt;th&gt;material&lt;/th&gt;
      &lt;th&gt;color&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;leather&lt;/td&gt;
      &lt;td&gt;brown&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;hemp canvas&lt;/td&gt;
      &lt;td&gt;natural&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;glass&lt;/td&gt;
      &lt;td&gt;transparent&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Table: Shoes, their sizes, and what they’re made of&lt;/p&gt;

&lt;p&gt;(The above is the caption for the table.) Pandoc also supports
multi-line tables:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;keyword&lt;/th&gt;
      &lt;th&gt;text&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;red&lt;/td&gt;
      &lt;td&gt;Sunsets, apples, and&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;other red or reddish&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;things.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;green&lt;/td&gt;
      &lt;td&gt;Leaves, grass, frogs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;and other things it’s&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;not easy being.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A horizontal rule follows.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here’s a definition list:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;apples&lt;/dt&gt;
  &lt;dd&gt;Good for making applesauce.
oranges&lt;/dd&gt;
  &lt;dd&gt;Citrus!
tomatoes&lt;/dd&gt;
  &lt;dd&gt;There’s no “e” in tomatoe.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Again, text is indented 4 spaces. (Put a blank line between each
term/definition pair to spread things out more.)&lt;/p&gt;

&lt;p&gt;Here’s a “line block”:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Line one&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Line too&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Line tree&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;and images can be specified like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;example-image.jpg&quot; alt=&quot;example image&quot; title=&quot;An exemplary image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;I = \int \rho R^{2} dV&lt;/script&gt;

&lt;p&gt;And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: `foo`, *bar*, etc.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Footnote text goes here.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">An h1 header Paragraphs are separated by a blank line. 2nd paragraph. Italic, bold, and monospace. Itemized lists look like: this one that one the other one Note that — not considering the asterisk — the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., “it’s all in chapters 12–14”). Three dots … will be converted to an ellipsis. Unicode is supported. ? An h2 header Here’s a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here’s a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print &quot;Welcome to flavor country!&quot;; } (which makes copying &amp;amp; pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range(10): # (but not *too* quick) time.sleep(0.5) print i An h3 header Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here’s a link to a website, to a local doc, and to a section heading in the current doc. Here’s a footnote 1. Tables can look like this: size material color 9 leather brown 10 hemp canvas natural 11 glass transparent Table: Shoes, their sizes, and what they’re made of (The above is the caption for the table.) Pandoc also supports multi-line tables: keyword text red Sunsets, apples, and   other red or reddish   things.     green Leaves, grass, frogs   and other things it’s   not easy being. A horizontal rule follows. Here’s a definition list: apples Good for making applesauce. oranges Citrus! tomatoes There’s no “e” in tomatoe. Again, text is indented 4 spaces. (Put a blank line between each term/definition pair to spread things out more.) Here’s a “line block”: Line one Line too Line tree and images can be specified like so: Inline math equations go in like so: $\omega = d\phi / dt$. Display math should get its own line and be put in in double-dollarsigns: And note that you can backslash-escape any punctuation characters which you wish to be displayed literally, ex.: `foo`, *bar*, etc. Footnote text goes here.&amp;nbsp;&amp;#8617;</summary></entry><entry><title type="html">Empty Post</title><link href="/blog/empty-post/" rel="alternate" type="text/html" title="Empty Post" /><published>2017-05-26T00:00:00+02:00</published><updated>2017-05-26T00:00:00+02:00</updated><id>/blog/empty-post</id><content type="html" xml:base="/blog/empty-post/"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/blog/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-05-25T20:30:14+02:00</published><updated>2017-05-25T20:30:14+02:00</updated><id>/blog/welcome-to-jekyll</id><content type="html" xml:base="/blog/welcome-to-jekyll/">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.
&lt;!-- endexcerpt --&gt;
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>